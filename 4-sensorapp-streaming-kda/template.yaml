AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: SensorStats - Kinesis Data Analytics example

# This template builds the Kinesis stream ARN from the base
# template using the following expression:
#   !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/sensordata"

Parameters:
  IoTdataEndpoint:
    Type: String
    Default: "abc123abc123-ats.iot.us-east-2.amazonaws.com"

Resources:
  # ****************************************
  # Kinesis Data Analytics configuration
  # ****************************************
  KinesisAnalyticsSensorApplication:
    Type: "AWS::KinesisAnalytics::Application"
    Properties:
      ApplicationName: "sensor-stats"
      ApplicationCode: |
        -- -- 1. Calculate sensor data stats 
        CREATE OR REPLACE STREAM "SENSORCALC_STREAM" (             
            "deviceTimestamp"  TIMESTAMP,
            "name" VARCHAR(16),              
            "facilityId" INTEGER,
            "processId" BIGINT,
            "sensorId" INTEGER NOT NULL, 
            "min_value" REAL,
            "max_value" REAL,
            "stddev_value" REAL,
            "count_items" INTEGER);
            
        CREATE OR REPLACE PUMP "SENSORCALC_STREAM_PUMP" AS 
        INSERT INTO "SENSORCALC_STREAM" 
        SELECT STREAM STEP("SOURCE_SQL_STREAM_001".ROWTIME BY INTERVAL '30' SECOND) AS "deviceTimestamp",              
            "name", 
            "facilityId",             
            "processId",             
            "sensorId",
            MIN("sensorData") AS "min_value",
            MAX("sensorData") AS "max_value",
            STDDEV_SAMP("sensorData") AS "stddev_value",
            COUNT(*) AS "count_items"                 
        FROM "SOURCE_SQL_STREAM_001"
        GROUP BY "facilityId", "processId", "sensorId", "name",
               STEP("SOURCE_SQL_STREAM_001".ROWTIME BY INTERVAL '30' SECOND);

      Inputs:
        - NamePrefix: "SOURCE_SQL_STREAM"
          InputParallelism:
            Count: 1
          InputSchema:
            RecordFormat:
              RecordFormatType: "JSON"
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: "$"
            RecordEncoding: "UTF-8"
            RecordColumns:
              - Name: "uuid"
                Mapping: "$.uuid"
                SqlType: "VARCHAR(64)"
              - Name: "event"
                Mapping: "$.event"
                SqlType: "VARCHAR(8)"
              - Name: "deviceTimestamp"
                Mapping: "$.deviceTimestamp"
                SqlType: "BIGINT"
              - Name: "COL_second"
                Mapping: "$.second"
                SqlType: "INTEGER"
              - Name: "name"
                Mapping: "$.name"
                SqlType: "VARCHAR(16)"
              - Name: "sensorId"
                Mapping: "$.sensorId"
                SqlType: "INTEGER"
              - Name: "processId"
                Mapping: "$.processId"
                SqlType: "BIGINT"
              - Name: "facilityId"
                Mapping: "$.facilityId"
                SqlType: "INTEGER"
              - Name: "sensorData"
                Mapping: "$.sensorData"
                SqlType: "REAL"
          KinesisStreamsInput:
            ResourceARN: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/sensordata"
            RoleARN: !GetAtt KinesisAnalyticsSensorRole.Arn

  KinesisAnalyticsSensorApplicationOutput:
    Type: "AWS::KinesisAnalytics::ApplicationOutput"
    DependsOn: KinesisAnalyticsSensorApplication
    Properties:
      ApplicationName: !Ref KinesisAnalyticsSensorApplication
      Output:
        Name: "SENSORCALC_STREAM"
        LambdaOutput:
          ResourceARN: !GetAtt SensorStatsFunction.Arn
          RoleARN: !GetAtt KinesisAnalyticsSensorRole.Arn
        DestinationSchema:
          RecordFormatType: "JSON"

  # *************************************************************
  # Lambda function for Kinesis Data Analytics app destination
  # *************************************************************
  SensorStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SensorStatsFunction/
      Handler: app.handler
      Runtime: nodejs14.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          IOT_DATA_ENDPOINT: !Ref IoTdataEndpoint
          TOPIC: "latest-minutestats"
      Policies:
        - Statement:
            - Sid: PublishToIotPolicy
              Effect: Allow
              Action:
                - "iot:Publish"
              Resource: "*"

  ###################################################################
  #  Kinesis Analytics Role for Sensor Data
  ###################################################################
  KinesisAnalyticsSensorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - kinesisanalytics.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ReadInputSensorKinesis
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:GetShardIterator"
                  - "kinesis:GetRecords"
                Resource: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/sensordata"
        - PolicyName: InvokeSensorStatsLambdaFunction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunctionConfiguration"
                Resource: !GetAtt SensorStatsFunction.Arn
